// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Filter List should match snapshot 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "#000000",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "zIndex": 2,
        },
        Object {
          "opacity": 0,
        },
      ]
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
          "marginBottom": 15,
          "marginTop": 30,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "paddingHorizontal": 75,
          }
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          numberOfLines={1}
          style={
            Array [
              Object {
                "backgroundColor": "rgba(255, 255, 255, 0)",
                "borderBottomColor": "#FFFFFF",
                "color": "#FFFFFF",
                "fontFamily": "Menlo-Regular",
                "fontSize": 16,
                "fontWeight": "300",
              },
              Object {
                "opacity": 0,
              },
            ]
          }
        >
          COLORS
        </Text>
      </View>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        Object {
          "opacity": 1,
        },
      ]
    }
  >
    <View
      onLayout={[Function]}
    >
      <View
        constrainWidth={750}
        source={
          Object {
            "uri": undefined,
          }
        }
      >
        <View>
          <BVLinearGradient
            colors={
              Array [
                16777215,
                16777215,
                16777215,
              ]
            }
            endPoint={
              Object {
                "x": 0,
                "y": 0,
              }
            }
            locations={null}
            startPoint={
              Object {
                "x": 0,
                "y": 1,
              }
            }
            style={
              Object {
                "paddingBottom": 15,
                "paddingHorizontal": 15,
                "paddingTop": 75,
              }
            }
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "backgroundColor": "rgba(255, 255, 255, 0)",
                    "color": "rgb(30, 30, 30)",
                    "fontSize": 22,
                    "fontWeight": "700",
                  },
                  undefined,
                ]
              }
            >
              Colors
            </Text>
          </BVLinearGradient>
        </View>
      </View>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "transform": Array [
          Object {
            "translateY": 100,
          },
        ],
      }
    }
  >
    <RCTScrollView
      ccs={
        ContentCoverSliderUIStore {
          "headerHeight": 1334,
          "onLayout": [Function],
        }
      }
      contentContainerStyle={
        Object {
          "paddingBottom": 48,
        }
      }
      data={
        Array [
          Object {
            "data": Array [
              Object {},
            ],
            "renderItem": [Function],
          },
          Object {
            "data": Array [
              Object {},
            ],
            "renderItem": [Function],
          },
        ]
      }
      disableVirtualization={false}
      filterStore={Object {}}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      renderItem={[Function]}
      renderSectionHeader={[Function]}
      scrollEventThrottle={16}
      sections={
        Array [
          Object {
            "data": Array [
              Object {},
            ],
            "renderItem": [Function],
          },
          Object {
            "data": Array [
              Object {},
            ],
            "renderItem": [Function],
          },
        ]
      }
      showsHorizontalScrollIndicator={false}
      showsVerticalScrollIndicator={false}
      stickyHeaderIndices={
        Array [
          0,
          3,
        ]
      }
      stickySectionHeadersEnabled={true}
      title="Colors"
      updateCellsBatchingPeriod={50}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        />
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Object {
                "paddingTop": 1334,
              }
            }
          />
        </View>
        <View
          onLayout={[Function]}
          style={null}
        />
        <View
          onLayout={[Function]}
          style={null}
        />
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            style={
              Array [
                Object {
                  "backgroundColor": "#FFFFFF",
                  "paddingLeft": 15,
                },
                Object {
                  "paddingVertical": 15,
                },
              ]
            }
          >
            <View
              accessible={true}
              isTVSelectable={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <View
                style={
                  Object {
                    "paddingVertical": 7.5,
                  }
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "backgroundColor": "rgba(255, 255, 255, 0)",
                      "color": "#000000",
                      "fontSize": 16,
                      "fontWeight": "600",
                    }
                  }
                >
                  Show All
                </Text>
              </View>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        />
      </View>
    </RCTScrollView>
  </View>
  <BVLinearGradient
    colors={
      Array [
        855638016,
        0,
      ]
    }
    endPoint={
      Object {
        "x": 0,
        "y": 1,
      }
    }
    locations={null}
    pointerEvents="box-none"
    startPoint={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    style={
      Object {
        "height": 333.5,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 3,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "flex-start",
          "justifyContent": "flex-start",
          "marginLeft": 15,
          "marginTop": 29.9,
          "opacity": 0,
          "transform": Array [
            Object {
              "scale": 0.3,
            },
          ],
        }
      }
    >
      <View
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          hitSlop={
            Object {
              "bottom": 15,
              "left": 15,
              "right": 15,
              "top": 15,
            }
          }
        >
          <View
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                false,
                false,
                false,
                Object {
                  "alignItems": "center",
                  "backgroundColor": "transparent",
                  "justifyContent": "center",
                },
                undefined,
              ]
            }
          >
            <Text
              accessible={true}
              allowFontScaling={false}
              ellipsizeMode="tail"
              style={
                Array [
                  Object {
                    "color": "rgb(30, 30, 30)",
                    "fontSize": 18,
                  },
                  Array [
                    Object {
                      "backgroundColor": "transparent",
                    },
                    undefined,
                  ],
                  Object {
                    "fontFamily": "Material Icons",
                    "fontStyle": "normal",
                    "fontWeight": "normal",
                  },
                ]
              }
            >
              
            </Text>
          </View>
        </View>
      </View>
    </View>
  </BVLinearGradient>
</View>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilterPopup should render to snapshot 1`] = `
<Provider
  filterStore={
    Object {
      "addMatchers": [Function],
      "advanceTimersByTime": [Function],
      "autoMockOff": [Function],
      "autoMockOn": [Function],
      "clearAllMocks": [Function],
      "clearAllTimers": [Function],
      "deepUnmock": [Function],
      "disableAutomock": [Function],
      "doMock": [Function],
      "dontMock": [Function],
      "enableAutomock": [Function],
      "fn": [Function],
      "genMockFromModule": [Function],
      "isMockFunction": [Function],
      "mock": [Function],
      "numProducts": 10,
      "requireActual": [Function],
      "requireMock": [Function],
      "resetAllMocks": [Function],
      "resetModuleRegistry": [Function],
      "resetModules": [Function],
      "restoreAllMocks": [Function],
      "runAllImmediates": [Function],
      "runAllTicks": [Function],
      "runAllTimers": [Function],
      "runOnlyPendingTimers": [Function],
      "runTimersToTime": [Function],
      "setMock": [Function],
      "setTimeout": [Function],
      "spyOn": [Function],
      "unmock": [Function],
      "useFakeTimers": [Function],
      "useRealTimers": [Function],
    }
  }
>
  <Component
    pointerEvents="box-none"
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
      }
    }
  >
    <ScrollView
      bounces={false}
      contentContainerStyle={
        Array [
          Object {
            "paddingTop": 100,
          },
          Object {
            "paddingBottom": 150,
          },
        ]
      }
      showsVerticalScrollIndicator={false}
      style={
        Object {
          "padding": 25,
        }
      }
    >
      <Filter />
    </ScrollView>
    <Component
      pointerEvents="box-none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
        }
      }
    >
      <LinearGradient
        colors={
          Array [
            "rgba(255, 255, 255, 0.9)",
            "rgba(255, 255, 255, 0)",
          ]
        }
        end={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        pointerEvents="box-none"
        start={
          Object {
            "x": 0,
            "y": 1,
          }
        }
        style={
          Object {
            "paddingBottom": 0,
          }
        }
      >
        <Component
          style={
            Object {
              "alignItems": "center",
            }
          }
        >
          <TouchableOpacity
            activeOpacity={0.2}
            onPress={[MockFunction]}
          >
            <Component
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#9013FE",
                  "borderRadius": 15,
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "margin": 15,
                  "paddingHorizontal": 50,
                  "paddingVertical": 7.5,
                }
              }
            >
              <inject-ProductCount
                labelStyle={
                  Object {
                    "backgroundColor": "rgba(255, 255, 255, 0)",
                    "borderBottomColor": "#FFFFFF",
                    "color": "#FFFFFF",
                    "fontSize": 16,
                    "fontWeight": "600",
                  }
                }
              />
            </Component>
          </TouchableOpacity>
        </Component>
      </LinearGradient>
    </Component>
  </Component>
</Provider>
`;
